package com.mnewservice.mcontent.web;

import com.mnewservice.mcontent.domain.Content;
import com.mnewservice.mcontent.domain.Discover;
import com.mnewservice.mcontent.domain.Service;
import com.mnewservice.mcontent.domain.SmsMessage;
import com.mnewservice.mcontent.manager.DeliveryPipeManager;
import com.mnewservice.mcontent.domain.Subscriber;
import com.mnewservice.mcontent.domain.Subscription;
import com.mnewservice.mcontent.domain.SubscriptionPeriod;
import com.mnewservice.mcontent.domain.SubscriptionHistory;
import com.mnewservice.mcontent.manager.ServiceManager;
import com.mnewservice.mcontent.manager.SmsMessageManager;
import com.mnewservice.mcontent.manager.SubscriberManager;
import com.mnewservice.mcontent.util.DateUtils;
import com.mnewservice.mcontent.util.Messages;
import com.mnewservice.mcontent.util.SessionUtils;
import org.springframework.beans.factory.annotation.Value;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class PresentationController {

    private static final Logger LOG
            = Logger.getLogger(PresentationController.class);
    private static final String INVALID_UUID = "Invalid uuid: %s";
    private static final String NO_ACCESS_TO_CONTENT
            = "User %s does not have access to the content with uuid %s";
    private static final int MESSAGE_HISTORY_LENGTH_IN_DAYS = 7;

    @Autowired
    private SubscriberManager subscriberManager;

    @Autowired
    private DeliveryPipeManager deliveryPipeManager;

    @Autowired
    private ServiceManager serviceManager;

    @Autowired
    private SmsMessageManager smsMessageManager;

    @Autowired
    Messages messages;

    @Value("${application.notification.subscribeToService}")
    private String subscribeToService;

    @Value("${application.content.themes.autogenerated}")
    private String defaultTheme;

    @RequestMapping({"/show/a/{short_uuid}"})
    public ModelAndView showContent(
            @PathVariable("short_uuid") String shortUuid,
            HttpServletRequest request) {
        String theme = deliveryPipeManager.getThemeForContentByUuid(shortUuid);
        Content content = deliveryPipeManager.getContentByUuid(shortUuid);
        if (theme == null) {
            LOG.error(String.format(INVALID_UUID, shortUuid));
            theme = defaultTheme;
            content = new Content();
            content.setTitle(messages.get("show.contentNotFound.title"));
            content.setContent(messages.get("show.contentNotFound.content"));
        } else if (content == null) {
            LOG.error(String.format(
                    NO_ACCESS_TO_CONTENT,
                    SessionUtils.getCurrentUserUsername(),
                    shortUuid)
            );
            theme = defaultTheme;
            content = new Content();
            content.setTitle(messages.get("show.subscriptionExpired.title"));
            content.setContent(messages.get("show.subscriptionExpired.content"));
        }

        ModelAndView mav = new ModelAndView("show");
        mav.addObject("theme", theme);
        mav.addObject("content", content);
        mav.addObject("subscriber", request.getRemoteUser());
        mav.addObject("subscriberhistory", request.getRemoteUser());
        mav.addObject("short_uuid", shortUuid);
        return mav;
    }

    @RequestMapping(value = {"/show/subscriber"})
    public ModelAndView viewAllSubscriptions(
            @RequestParam(value = "showAll", required = false) boolean showAll) {
        LOG.info("/show/subscriber/  showAll: [" + showAll + "]");
        ModelAndView mav = new ModelAndView("subscriberDetail");
        mav.addObject("subscriber", subscriberManager.getUsersSubscriptions(showAll));
        mav.addObject("showAll", showAll);
        mav.addObject("reloadRef", "/show/subscriber");
        return mav;
    }

    @RequestMapping(value = {"/show/a/default"})
    public ModelAndView showContentPasi(
            @RequestParam(value = "uuid", required = false) String shortUuid1,
            HttpServletRequest request) {
        return viewSubscriptionHistory("", request);
    }

    @RequestMapping(value = {"/show/subscriber/history"})
    public ModelAndView viewSubscriptionHistory(
            @RequestParam(value = "uuid", required = false) String shortUuid,
            HttpServletRequest request
    ) {
        Subscriber sub = subscriberManager.getUsersSubscriptions(true);

        Set<Subscription> subsc = sub.getSubscriptions();
        ArrayList<SubscriptionHistory> activelist = new ArrayList<>();
        ArrayList<SubscriptionHistory> expiredlist = new ArrayList<>();

        for (Subscription s : subsc) {

            Collection c = s.getPeriods();
            final Iterator itr = c.iterator();
            SubscriptionPeriod sp, latestsp = null;
            while (itr.hasNext()) {
                sp = (SubscriptionPeriod) itr.next();
                if (latestsp == null) {
                    latestsp = sp;
                }
                if (latestsp != null) {
                    if (latestsp.getEnd().before(sp.getEnd())) {
                        latestsp = sp;
                    }
                }
            }

            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date date = new Date();
            String datestring = dateFormat.format(latestsp.getEnd());

            SubscriptionHistory sh = new SubscriptionHistory();
            if (latestsp.getEnd().after(date)) {
                sh.setKeyword(s.getService().getKeyword());
                sh.setCode("" + s.getService().getShortCode());
                sh.setExpire(datestring);

                activelist.add(sh);
            } else {
                sh.setKeyword(s.getService().getKeyword());
                sh.setCode("" + s.getService().getShortCode());
                sh.setExpire(datestring);

                expiredlist.add(sh);
            }

        }
        Collections.sort(activelist);
        Collections.sort(expiredlist);
        Content cnt = new Content();
        cnt.setTitle("My subscriptions");
        cnt.setMessage("Message");
        cnt.setContent(" ");

        ModelAndView mav = new ModelAndView("history");
        mav.addObject("theme", deliveryPipeManager.getThemeForContentByUuid(shortUuid));
        mav.addObject("content", cnt);

        mav.addObject("activelist", activelist);
        mav.addObject("expiredlist", expiredlist);
        mav.addObject("short_uuid", shortUuid);

        mav.addObject("subscriberhistory", request.getRemoteUser());

        return mav;
    }

    @RequestMapping(value = "/show/messages", method = RequestMethod.GET)
    public ModelAndView showMessages(
            @RequestParam(value = "uuid", required = false) String shortUuid) {
        Date newerThan = DateUtils.getCurrentDatePlusNDays(-MESSAGE_HISTORY_LENGTH_IN_DAYS);
        Collection<SmsMessage> messages = smsMessageManager.getLatestMessages(newerThan);

        ModelAndView mav = new ModelAndView("messagesPaged");
        mav.addObject("theme", deliveryPipeManager.getThemeForContentByUuid(shortUuid));
        mav.addObject("messages", messages);

        return mav;
    }

    @RequestMapping(value = "/show/discover", method = RequestMethod.GET)
    public ModelAndView showDiscover(
            @RequestParam(value = "uuid", required = false) String shortUuid,
            HttpServletRequest request) {
        ArrayList discoverlist = new ArrayList();
        ArrayList<Service> activelist = new ArrayList();
        Collection<Service> services = serviceManager.getAllServices();
        Subscriber sub = subscriberManager.getUsersSubscriptions(true);
        Set<Subscription> subsc = sub.getSubscriptions();
        for (Subscription s : subsc) {
            Collection c = s.getPeriods();
            final Iterator itr = c.iterator();
            SubscriptionPeriod sp, latestsp = null;
            while (itr.hasNext()) {
                sp = (SubscriptionPeriod) itr.next();
                if (latestsp == null) {
                    latestsp = sp;
                }
                if (latestsp != null) {
                    if (latestsp.getEnd().before(sp.getEnd())) {
                        latestsp = sp;
                    }
                }
            }

            if (latestsp.getEnd().after(new Date())) {
                activelist.add(s.getService());
            }

        }

        Discover discover;
        for (Service service : services) {
            discover = new Discover();
            discover.setServicename(service.getKeyword());
            discover.setServicedescription(service.getServiceDescription());
            discover.setServiceduration(service.getSubscriptionPeriod());
            discover.setService(service);
            discoverlist.add(discover);

            for (Service serviceremove : activelist) {
                if (service.getId() == serviceremove.getId()) {
                    discoverlist.remove(discover);

                }
            }
        }

        ModelAndView mav = new ModelAndView("discover");

        mav.addObject("theme", deliveryPipeManager.getThemeForContentByUuid(shortUuid));
        mav.addObject("content", deliveryPipeManager.getContentByUuid(shortUuid));
        mav.addObject("discoverlist", discoverlist);
        mav.addObject("subscriberhistory", request.getRemoteUser());
        mav.addObject("short_uuid", shortUuid);
        return mav;
    }

    @RequestMapping(value = "/show/discover", method = RequestMethod.POST)
    public ModelAndView subscribeToService(
            @RequestParam(value = "uuid", required = false) String shortUuid,
            @RequestParam(value = "keyword", required = false) String keyword,
            @RequestParam(value = "shortcode", required = false) String shortcode,
            @RequestParam(value = "operator", required = false) String operator,
            HttpServletRequest request) {
        ArrayList discoverlist = new ArrayList();
        Discover discover;

        Collection<Service> services = serviceManager.getAllServices();
        for (Service service : services) {
            discover = new Discover();
            discover.setServicename(service.getKeyword());
            discover.setServicedescription(service.getServiceDescription());
            discover.setServiceduration(service.getSubscriptionPeriod());
            discover.setService(service);
            discoverlist.add(discover);
        }

        ModelAndView mav = new ModelAndView("subinstructions");
        mav.addObject("theme", deliveryPipeManager.getThemeForContentByUuid(shortUuid));
        mav.addObject("content", deliveryPipeManager.getContentByUuid(shortUuid));
        mav.addObject("discoverlist", discoverlist);
        mav.addObject("subscriberhistory", request.getRemoteUser());
        mav.addObject("short_uuid", shortUuid);
        return mav;
    }

    @RequestMapping(value = {"/show/discover/subinstructions"})
    public ModelAndView viewSubscriptionHistoryMav(
            @RequestParam(value = "operator", required = false) String operator,
            @RequestParam(value = "keyword", required = false) String keyword,
            @RequestParam(value = "shortcode", required = false) String shortcode
    ) {
        String serviceSubscribeInstructionsDetails
                = String.format(subscribeToService, keyword, shortcode);
        ModelAndView mav = new ModelAndView("subinstructions");
        mav.addObject("subscribeInstructionsDetails", serviceSubscribeInstructionsDetails);
        return mav;
    }

}
