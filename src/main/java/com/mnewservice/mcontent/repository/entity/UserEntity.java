package com.mnewservice.mcontent.repository.entity;

import com.mnewservice.mcontent.security.PasswordEncrypter;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;
import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 *
 * @author Marko Tuononen <marko.tuononen at nolwenture.com>
 */
@Entity
@Table(
        name = "users",
        uniqueConstraints = @UniqueConstraint(
                columnNames = {"username"}
        )
)
public class UserEntity extends AbstractEntity {

    private String username;
    private String password;
    private boolean active;

    @ManyToMany
    private Set<RoleEntity> roles;

    public UserEntity() {
    }

    public UserEntity(String username, String password, Collection<RoleEntity> roles) {
        this.username = username;
        this.password = PasswordEncrypter.getInstance().encrypt(password);
        this.active = false;
        this.roles = roles.stream().collect(Collectors.toSet());
    }

// <editor-fold defaultstate="collapsed" desc="autogenerated getters / setters">
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    public Set<RoleEntity> getRoles() {
        return roles;
    }

    public void setRoles(Set<RoleEntity> roles) {
        this.roles = roles;
    }
// </editor-fold>

}
