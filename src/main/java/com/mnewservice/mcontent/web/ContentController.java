package com.mnewservice.mcontent.web;

import com.mnewservice.mcontent.domain.*;
import com.mnewservice.mcontent.manager.*;
import com.mnewservice.mcontent.repository.entity.AbstractDeliverableEntity;
import com.mnewservice.mcontent.repository.entity.CustomContentEntity;
import com.mnewservice.mcontent.repository.entity.FileEntity;
import com.mnewservice.mcontent.util.StoreXLSXContentFile;
import java.io.File;
import java.io.InputStream;
import java.nio.file.Files;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.Part;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.support.PagedListHolder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class ContentController {

    private static final Logger LOG
            = Logger.getLogger(ContentController.class);

    private int LIST_PAGE_SIZE = 25; // How many rows in page
    private int PAGINATION_MENU_SIZE = 5; // How many numbers is visible in pagination menu
            
    @Value("${application.notification.deliverable.created.message.subject}")
    private String deliverableCreatedMessageSubject;

    @Value("${application.notification.deliverable.created.message.text}")
    private String deliverableCreatedMessageText;

    @Value("${application.notification.deliverable.approved.message.subject}")
    private String deliverableApprovedMessageSubject;

    @Value("${application.notification.deliverable.approved.message.text}")
    private String deliverableApprovedMessageText;

    @Value("${application.notification.deliverable.disapproved.message.subject}")
    private String deliverableDisapprovedMessageSubject;

    @Value("${application.notification.deliverable.disapproved.message.text}")
    private String deliverableDisapprovedMessageText;

    @Value("${application.content.themes}")
    private String themes;

    @Value("${application.content.themes.autogenerated}")
    private String autogeratedthemes;

    @Autowired
    private DeliveryPipeManager deliveryPipeManager;

    @Autowired
    private AbstractDeliverableManager deliverableManager;

    @Autowired
    private SeriesDeliverableManager seriesManager;

    @Autowired
    private ScheduledDeliverableManager scheduledManager;

    @Autowired
    private UserManager userManager;

    @Autowired
    private ServiceManager serviceManager;

    @Autowired
    private FileManager fileManager;

    @Autowired
    private ProviderManager providerManager;

    @Autowired
    private NotificationManager notificationManager;
    
    @Autowired
    private ServletContext servletContext;
    
    private boolean isAutogeneratedTheme(String theme) {
        return Arrays.asList(autogeratedthemes.split(",")).stream().map(s -> s.trim()).collect(Collectors.toList()).contains(theme);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @ModelAttribute("allDeliverableTypes")
    public List<DeliverableType> populateDeliverableTypes() {
        return Arrays.asList(DeliverableType.values());
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @ModelAttribute("allThemes")
    public List<String> populateThemes() {
        return Arrays.asList(themes.split(",")).stream().map(s -> s.trim()).collect(Collectors.toList());
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @ModelAttribute("allDeliveryPipes")
    public List<DeliveryPipe> populateServices() {
       return deliveryPipeManager.getAllDeliveryPipes()
               .stream().collect(Collectors.toList());
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @ModelAttribute("allProviders")
    public List<User> populateProviders() {
        return userManager.getAllUsersByRoleName(Role.PROVIDER_SHOULD_BE_ENUM)
                .stream().collect(Collectors.toList());
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping({"/content/list_alk"})
    public String listServices() {
        return "deliveryPipeList";
    }
    
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping({"/content/list"})
    public String listServicesPaged(HttpServletRequest request) {
                request.getSession().setAttribute("servicesList", null);
        return "redirect:/content/list/page/1";
    }
    
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value={"/content/list/page/{pagenumber}"})
    public ModelAndView viewSmsMessageLogPageNumberX(HttpServletRequest request, @PathVariable("pagenumber") Integer pagenumber,
            @RequestParam(value = "nameFilter", required = false) String fname) {

        String baseUrl = "/content/list/page";
        PagedListHolder<?> pagedListHolder = (PagedListHolder<?>) request.getSession().getAttribute("servicesList"); 
        if(pagedListHolder == null){
            pagedListHolder = new PagedListHolder(populateServices()); 

        }else{
            final int goToPage = pagenumber - 1;
            if(goToPage <= pagedListHolder.getPageCount() && goToPage >= 0){
                pagedListHolder.setPage(goToPage);
            }
            if(fname != null){
                pagedListHolder = new PagedListHolder(deliveryPipeManager.getDeliveryPipes(fname).stream().collect(Collectors.toList()));
            }
        }
        
        pagedListHolder.setPageSize(LIST_PAGE_SIZE);
        pagedListHolder.getPageList();
        request.getSession().setAttribute("servicesList", pagedListHolder);
        int current = pagedListHolder.getPage() + 1;
        int begin = Math.max(1, current - (PAGINATION_MENU_SIZE / 2));
        int end = Math.min(begin + (PAGINATION_MENU_SIZE - 1), pagedListHolder.getPageCount());
        int totalPageCount = pagedListHolder.getPageCount();

        /*
        System.out.println("Begin, end, current : " + begin + ", " + end + ", " + current);
        ArrayList<SmsMessage> al = (ArrayList<SmsMessage>) systemStatuseManager.getSmsMessages();
        ArrayList<SmsMessage> al2 = new ArrayList<SmsMessage>(al.subList((begin - 1), end));
*/
        ModelAndView mav = new ModelAndView("deliveryPipeListPaged");
        //mav.addObject("messages", systemStatuseManager.getSmsMessages());
        mav.addObject("allDeliveryPipes", pagedListHolder.getPageList());
        mav.addObject("beginIndex", begin);
        mav.addObject("endIndex", end);
        mav.addObject("currentIndex", current);
        mav.addObject("totalPageCount", totalPageCount);
        mav.addObject("baseUrl", baseUrl);
        mav.addObject("pagedListHolder", pagedListHolder);
        mav.addObject("nameFilter", fname);
                
        return mav;
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping({"/deliverypipe/list/filtered/"})
    public ModelAndView listFilteredServices(@RequestParam(value = "nameFilter") String fname) {
        ModelAndView mav = new ModelAndView("deliveryPipeList");
        System.out.println("nameFilter" + fname);
        mav.addObject("filteredDeliveryPipes", deliveryPipeManager.getDeliveryPipes(fname)
                .stream().collect(Collectors.toList()));
        mav.addObject("nameFilter", fname);
        
        return mav;
    }

//<editor-fold defaultstate="collapsed" desc="error handling">
    @ResponseStatus(value = HttpStatus.CONFLICT, reason = "Data handling error")  // 409
    private class DataHandlingException extends RuntimeException {

        public DataHandlingException() {
            super();
        }

        public DataHandlingException(String s) {
            super(s);
        }

        public DataHandlingException(String s, Throwable throwable) {
            super(s, throwable);
        }

        public DataHandlingException(Throwable throwable) {
            super(throwable);
        }
    }

    private ModelAndView mavAddNLogErrorText(ModelAndView mav, List<ObjectError> errors) {
        String errorText = "";
        errors.stream().forEach((error) -> {
            errorText.concat(error.toString());
        });
        LOG.error(errorText);
        mav.addObject("errortext", errorText);
        return mav;
    }

//</editor-fold>
    //
//<editor-fold defaultstate="collapsed" desc="Create delivery pipe">
    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/create"})
    public ModelAndView viewDeliveryPipe() {
        LOG.info("/deliverypipe/create");
        ModelAndView mav = new ModelAndView("deliveryPipeDetail");
        mav.addObject("deliveryPipe", new DeliveryPipe());
        return mav;
    }

    @Autowired
    private DeliveryManager deliveryManager;

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/{pipeId}"})
    public ModelAndView viewDeliveryPipe(@PathVariable("pipeId") long id) {
        LOG.info("/deliverypipe/" + id);
        deliveryManager.deliverContent(DeliveryTime.T0800);
        ModelAndView mav = new ModelAndView("deliveryPipeDetail");
        mav.addObject("deliveryPipe", deliveryPipeManager.getDeliveryPipe(id));
        return mav;
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping(value = {"/deliverypipe/{pipeId}"}, params = {"save"})
    public ModelAndView saveDeliveryPipe(
            @PathVariable("pipeId") String id,
            final DeliveryPipe deliveryPipe,
            final BindingResult bindingResult,
            final ModelMap model) {
        LOG.info("saveDeliveryPipe, param=save... /deliverypipe/" + id + " param=save");
        ModelAndView mav = new ModelAndView("deliveryPipeDetail");

        if (bindingResult.hasErrors()) {
            mav = mavAddNLogErrorText(mav, bindingResult.getAllErrors());
            mav.addObject("deliveryPipe", model.getOrDefault("deliveryPipe", new DeliveryPipe()));
            mav.addObject("error", true);
        } else {
            try {
                // persist the object "service"
                DeliveryPipe savedDeliveryPipe = deliveryPipeManager.saveDeliveryPipe(deliveryPipe);
                mav.addObject("service", savedDeliveryPipe);
                mav.addObject("saved", true);
            } catch (Exception ex) {
                LOG.error(ex);
                throw new DataHandlingException(ex);
            }
        }

        return mav;
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/remove/{pipeId}"})
    public ModelAndView viewRemovableDeliveryPipe(@PathVariable("pipeId") long id) {
        LOG.info("/deliverypipe/remove/" + id);
        ModelAndView mav = new ModelAndView("deliveryPipeRemove");
        DeliveryPipe pipe = deliveryPipeManager.getDeliveryPipe(id);
        mav.addObject("deliveryPipe", pipe);
        if (deliveryPipeManager.hasContent(id)) {
            mav.addObject("hasContent", "true");
        }
        if (serviceManager.getAllServicesByDeliveryPipe(id).size() > 0) {
            mav.addObject("error", "true");
            mav.addObject("errortext", "Service(s) uses delivery pipe. Can't remove. Remove service(s) first.");
        }
        return mav;
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping(value = {"/deliverypipe/remove/{pipeId}"}, params = {"remove"})
    public ModelAndView removeDeliveryPipe(
            @PathVariable("pipeId") String id,
            final DeliveryPipe deliveryPipe,
            final BindingResult bindingResult,
            final ModelMap model) {
        LOG.info("/deliverypipe/remove/" + id + " param=remove");
        ModelAndView mav = new ModelAndView("deliveryPipeRemove");

        if (bindingResult.hasErrors()) {
            mav = mavAddNLogErrorText(mav, bindingResult.getAllErrors());
            mav.addObject("deliveryPipe", model.getOrDefault("deliveryPipe", new DeliveryPipe()));
            mav.addObject("error", true);
        }  else {
            try {
                deliveryPipeManager.removeDeliveryPipe(deliveryPipe.getId());
                deliveryPipe.setProviders(null);
                mav.addObject("deliveryPipe", deliveryPipe);
                mav.addObject("removed", true);
            } catch (Exception ex) {
                LOG.error(ex);
                throw new DataHandlingException(ex);
            }
        }

        return mav;
    }

//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Content list">
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping({"/deliverypipe/{pipeId}/content/list"})
    public ModelAndView viewDeliveryPipeContent(@PathVariable("pipeId") long id) {
        LOG.info("/deliverypipe/" + id + "/content/list");
        ModelAndView mav;
        DeliveryPipe pipe = deliveryPipeManager.getDeliveryPipe(id);
        //System.out.println();
        switch (pipe.getDeliverableType()) {
            case SCHEDULED:
                mav = new ModelAndView("deliveryPipeScheduledContent");
                mav.addObject("contents", //Thyme leaf javascript support is well unknown, so we do some magic here
                        scheduledManager.getDeliveryPipeScheduledDeliverable(id).stream().map(
                                deliverable -> new HashMap<String, Object>() {
                                    {
                                        put("id", deliverable.getId());
                                        put("title", deliverable.getContent().getTitle());
                                        put("status", deliverable.getStatus());
                                        put("date", new SimpleDateFormat("yyyy-MM-dd").format(deliverable.getDeliveryDate()));
                                        put("myStatus", deliverable.getStatus().toString().toLowerCase());
                                    }
                                }
                        ).collect(Collectors.toList()));
                break;

            case SERIES:
                mav = new ModelAndView("deliveryPipeSeriesContent");
                mav.addObject("contents", seriesManager.getDeliveryPipeSeriesDeliverable(id));
                break;

            default:
                throw new UnsupportedOperationException("Support for viewing content for pipe of type " + pipe.getDeliverableType() + " not implemented.");
        }
        mav.addObject(
                "deliveryPipe", pipe);
        return mav;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="getters">
    private DeliveryPipe getDeliveryPipe(long deliveryPipeId) throws Exception {
        DeliveryPipe deliveryPipe = deliveryPipeManager.getDeliveryPipe(deliveryPipeId);
        if (deliveryPipe == null) {
            throw new IllegalArgumentException(
                    "delivery pipe was not found with id=" + deliveryPipeId);
        }
        return deliveryPipe;
    }

    private SeriesDeliverable getSeriesDeliverable(long deliverableId,
                                                   DeliverableStatus disallowedStatus) throws Exception {
        SeriesDeliverable deliverable = seriesManager.getSeriesDeliverable(deliverableId);
        if (deliverable == null) {
            throw new IllegalArgumentException(
                    "series deliverable was not found with id=" + deliverableId);
        }
        if (disallowedStatus.equals(deliverable.getStatus())) {
            throw new IllegalStateException(
                    "series deliverable is on the wrong state : " + disallowedStatus.toString());
        }
        return deliverable;
    }

    private ScheduledDeliverable getScheduledDeliverable(long deliverableId,
                                                         DeliverableStatus disallowedStatus) {
        ScheduledDeliverable deliverable = scheduledManager.getScheduledDeliverable(deliverableId);
        if (deliverable == null) {
            throw new IllegalArgumentException(
                    "scheduled deliverable was not found with id=" + deliverableId);
        }
        if (disallowedStatus.equals(deliverable.getStatus())) {
            throw new IllegalStateException(
                    "scheduled deliverable is on the wrong state : " + disallowedStatus.toString());
        }
        return deliverable;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Series deliverable">
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/series/create"})
    public ModelAndView createSeriesContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId) {
        LOG.info("createSeriesContent... /deliverypipe/" + deliveryPipeId + "/series/create");
        //System.out.println("seriesManager" + seriesManager);
        ModelAndView mav = new ModelAndView("contentCreate");
        SeriesDeliverable newDeliverable = new SeriesDeliverable();
        newDeliverable.setStatus(DeliverableStatus.PENDING_APPROVAL);
        newDeliverable.setDeliveryDaysAfterSubscription(
                seriesManager.getNextDeliveryDay(deliveryPipeId));

        DeliveryPipe deliveryPipe = deliveryPipeManager.getDeliveryPipe(deliveryPipeId);
        mav.addObject("autoGenerateContent", isAutogeneratedTheme(deliveryPipe.getTheme()));
        mav.addObject("deliveryPipe", deliveryPipe);
        mav.addObject("deliverable", newDeliverable);
        return mav;
    }
    
    
        @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/series/upload"})
    public ModelAndView createSeriesContentFromXLSX(
            @PathVariable("deliveryPipeId") long deliveryPipeId) {
        LOG.info("createSeriesContentFromXLSX... /deliverypipe/" + deliveryPipeId + "/series/upload");
        
        /* Pasi kommentoi pois */
        ModelAndView mav = new ModelAndView("contentCreateFromUpload");
        
        SeriesDeliverable newDeliverable = new SeriesDeliverable();
        newDeliverable.setStatus(DeliverableStatus.PENDING_APPROVAL);
        newDeliverable.setDeliveryDaysAfterSubscription(
                seriesManager.getNextDeliveryDay(deliveryPipeId));

        DeliveryPipe deliveryPipe = deliveryPipeManager.getDeliveryPipe(deliveryPipeId);
        mav.addObject("autoGenerateContent", isAutogeneratedTheme(deliveryPipe.getTheme()));
        mav.addObject("deliveryPipe", deliveryPipe);
        mav.addObject("deliverable", newDeliverable);
        return mav;
    }

    
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/series/{deliverableId}"})
    public ModelAndView viewSeriesContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId) {

        LOG.info("viewSeriesContent... /deliverypipe/" + deliveryPipeId + "/series/" + deliverableId);

        DeliveryPipe deliveryPipe = deliveryPipeManager.getDeliveryPipe(deliveryPipeId);
        SeriesDeliverable deliverable = seriesManager.getSeriesDeliverable(deliverableId);


        ModelAndView mav = new ModelAndView(deliverable.getStatus() == DeliverableStatus.APPROVED ? "contentView" : "contentEdit");
        //System.out.println(deliveryPipe.getTheme());
        mav.addObject("autoGenerateContent", isAutogeneratedTheme(deliveryPipe.getTheme()));
        mav.addObject("deliveryPipe", deliveryPipe);
        mav.addObject("deliverable", deliverable);

        
        
        return mav;
    }

        @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/series/{deliverableId}"}, params = {"save"})
    public ModelAndView saveSeriesContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId,
            final SeriesDeliverable deliverable,
            final BindingResult bindingResult,
            final ModelMap model) {
        LOG.info("saveSeriesContent, param=save... /deliverypipe/" + deliveryPipeId + "/series/" + deliverableId + " param=save");
        ModelAndView mav = new ModelAndView("contentEdit");

        if (bindingResult.hasErrors()) {
            mav = mavAddNLogErrorText(mav, bindingResult.getAllErrors());
            mav.addObject("deliverable", model.getOrDefault("deliverable", new SeriesDeliverable()));
            mav.addObject("error", true);
        } else {
            try {
                DeliveryPipe deliveryPipe = getDeliveryPipe(deliveryPipeId);

                // Save
                SeriesDeliverable savedContent = seriesManager.saveSeriesDeliverable(deliveryPipeId, deliverable);
                mav.addObject("autoGenerateContent", isAutogeneratedTheme(deliveryPipe.getTheme()));
                mav.addObject("deliveryPipe", deliveryPipe);
                mav.addObject("deliverable", savedContent);
                mav.addObject("saved", true);
                if (deliverable.getId() == null) {
                    contentCreationNotification(savedContent, deliveryPipe);
                }

            } catch (Exception ex) {
                LOG.error(ex);
                throw new DataHandlingException(ex);
            }
        }

        return mav;
    }
    
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/series/{deliverableId}"}, params = {"xlsx"})
    public ModelAndView saveSeriesContentFromXLSXFile(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId,
            @RequestParam("xlsxfileid") String xlsxfileid,
            final SeriesDeliverable deliverable,
            final BindingResult bindingResult,
            final String xlsxfileid1,
            final ModelMap model) {
        
        LOG.info("saveSeriesContentFromXLSXFile, param=xlsx... /deliverypipe/" + deliveryPipeId + "/series/" + deliverableId + " param=xlsx");
        //System.out.println("Handle the .xlsx file here!");
         
        
        if (deliverable.getId() == null) {
            
            String contenttitle = "TestititleX";
            String contentmessage = "TestimessageX";

            //System.out.println("deliveryPipeId: " + deliveryPipeId);
            
            ContentFile file = fileManager.getFile(new Long(xlsxfileid));
            String ladattuxlsx = file.getUuid() + ".xlsx";
            //System.out.println("Check and handle excel-file: " + fileManager.getFilestoragePath() + ladattuxlsx);
            
            StoreXLSXContentFile sxcf = new StoreXLSXContentFile();
            sxcf.handleUploadedXSLXFile(fileManager.getFilestoragePath() + ladattuxlsx);
            
            Map<Integer, Map<Integer, String>> allpicnames = sxcf.getAllPicnames();
            Map<Integer, Map<String, String>> allcontent = sxcf.getAllContents();
            
            //System.out.println("allcontent.size() = " +allcontent.size() );
            //System.out.println("allpicnames.size() = " +allpicnames.size() );
            
            // Now we can handle contents and put 
            // We are sure, that content includes 0 to n pictures, so use allcontent 
            // We save all pictures with new name to folders/samba and database
            
            Map<Integer, Map<Integer, String>> allnewpicnames = new TreeMap<Integer, Map<Integer, String>>(saveAllPicturesWithNewName(allpicnames));

            String replaceimagetagwithpicturename = "";

         // We check content and replace the content tag "{image}" with picture new name
         for (Map.Entry<Integer, Map<String, String>> entry : allcontent.entrySet()) {

            Map<Integer, String> sheetpicnames1 = (Map<Integer, String>) allnewpicnames.get(entry.getKey());

            Map<String, String> sheetcontent = (Map<String, String>) allcontent.get(entry.getKey());
            
            replaceimagetagwithpicturename = sheetcontent.get("Content");
            contenttitle = sheetcontent.get("Title");
            contentmessage = sheetcontent.get("Message");
            
            // Save first 
            SeriesDeliverable newDeliverable = new SeriesDeliverable();
            newDeliverable.setStatus(DeliverableStatus.PENDING_APPROVAL);
            newDeliverable.setDeliveryDaysAfterSubscription(seriesManager.getNextDeliveryDay(deliveryPipeId));

            DeliveryPipe deliveryPipe = deliveryPipeManager.getDeliveryPipe(deliveryPipeId);
 
            newDeliverable.getContent().setMessage(contentmessage);
            newDeliverable.getContent().setTitle(contenttitle);      
            newDeliverable.getContent().setContent(replaceimagetagwithpicturename);
            SeriesDeliverable savedContent = seriesManager.saveSeriesDeliverable(deliveryPipeId, newDeliverable);
                        // ..and then we do the tricks

                if (newDeliverable.getId() == null) {
                    contentCreationNotification(savedContent, deliveryPipe);
                }
                deliverableId = savedContent.getId();
                //System.out.println("savedContent.getId() = " + savedContent.getId());
                SeriesDeliverable createdContent = seriesManager.getSeriesDeliverable(deliverableId);
                
            
            //System.out.println("Replace content: " + replaceimagetagwithpicturename);
             //for(int i = 0; i < sheetpicnames.size(); i++){
             for (Map.Entry<Integer, String> picentry : sheetpicnames1.entrySet()) {
                 //System.out.println(entry.getKey() + " = " + picentry.getKey() + ", " + picentry.getValue());

                 StringBuffer sb = new StringBuffer();
                 String uuid=picentry.getValue().substring(0, picentry.getValue().indexOf("."));
                 
                sb.append("<div class='content-image'>");
                sb.append("<img id='" + uuid + "' ");
                sb.append("src='/mContent/images/" + picentry.getValue() + "' ");
                sb.append("alt='" + picentry.getValue() + "'/>");
                sb.append("</div>");

                replaceimagetagwithpicturename = replaceimagetagwithpicturename.replaceFirst("\\{image\\}", new String(sb));
                
                             AbstractDeliverableEntity entity = deliverableManager.findOne(deliverableId);
                        try {
                            
                            FileEntity filee = fileManager.getFileByUuid(uuid);
                            
                            //
                            
                            
                            //
                    if (filee == null) {
                        String errMsg = "Can't find file from repository with id=" + uuid;
                        LOG.error(errMsg);
                        throw new Exception("Internal error - " + errMsg);
                    }
                    deliverableManager.addFile(entity, filee);
                    
                                } catch (Exception ex) {
                LOG.error(ex);
                throw new DataHandlingException(ex);
            }
             }
             //System.out.println("Replace done: " + replaceimagetagwithpicturename);
             
            createdContent.getContent().setMessage(contentmessage);
            createdContent.getContent().setTitle(contenttitle);      
            createdContent.getContent().setContent(replaceimagetagwithpicturename);
            seriesManager.saveSeriesDeliverable(deliveryPipeId, createdContent);

                }

        }

        
        return null;
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/series/{deliverableId}/approve"})
    @ResponseStatus(value = HttpStatus.OK)
    public void approveSeriesContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId) throws Exception {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/series/" + deliverableId + "/approve");
        SeriesDeliverable content = getSeriesDeliverable(deliverableId, DeliverableStatus.APPROVED);
        DeliveryPipe deliveryPipe = getDeliveryPipe(deliveryPipeId);

        content.setStatus(DeliverableStatus.APPROVED);
        seriesManager.saveSeriesDeliverable(deliveryPipeId, content);

        contentApproveNotification(content, deliveryPipe);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/series/{deliverableId}/disapprove"})
    @ResponseStatus(value = HttpStatus.OK)
    public void disapproveSeriesContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId) throws Exception {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/series/" + deliverableId + "/disapprove");
        SeriesDeliverable content
                = getSeriesDeliverable(deliverableId, DeliverableStatus.DISAPPROVED); // Was DeliverableStatus.PENDING_APPROVAL
        DeliveryPipe deliveryPipe = getDeliveryPipe(deliveryPipeId);

        content.setStatus(DeliverableStatus.DISAPPROVED);
        seriesManager.saveSeriesDeliverable(deliveryPipeId, content);

        contentDisapproveNotification(content, deliveryPipe);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/series/remove/{deliverableId}"})
    public ModelAndView viewRemovableSeriesContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId) {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/series/remove/" + deliverableId);
        SeriesDeliverable deliverable = seriesManager.getSeriesDeliverable(deliverableId);
        ModelAndView mav = new ModelAndView("contentSeriesRemove");
        mav.addObject("deliverable", deliverable);
        return mav;
    }

    @PreAuthorize("hasAnyAuthority('ADMIN')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/series/remove/{deliverableId}"}, params = {"remove"})
    public ModelAndView removeSeriesContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId,
            final SeriesDeliverable deliverable,
            final BindingResult bindingResult,
            final ModelMap model) {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/series/remove/" + deliverableId + " param=remove");
        ModelAndView mav = new ModelAndView("contentSeriesRemove");
        if (bindingResult.hasErrors()) {
            mav = mavAddNLogErrorText(mav, bindingResult.getAllErrors());
            mav.addObject("deliverable", model.getOrDefault("deliverable", new SeriesDeliverable()));
            mav.addObject("error", true);
        } else {
            try {
                seriesManager.removeSeriesDeliverable(deliverable.getId());
                mav.addObject("deliverable", deliverable);
                mav.addObject("removed", true);
            } catch (Exception ex) {
                LOG.error(ex);
                throw new DataHandlingException(ex);
            }
        }

        return mav;
    }

//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Scheduled deliverable">
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/scheduled/create"}, params = {"date"})
    public ModelAndView createScheduledContent(@PathVariable("deliveryPipeId") long deliveryPipeId, @RequestParam(value = "date") String date) {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/scheduled/create param=date " + date);
        ModelAndView mav = new ModelAndView("contentCreate");
        ScheduledDeliverable newDeliverable = new ScheduledDeliverable();
        try {
            newDeliverable.setDeliveryDate(new SimpleDateFormat("yyyy-MM-dd").parse(date));
        } catch (ParseException ex) {
            LOG.error("Failed to parse date " + date, ex);
        }

        DeliveryPipe deliveryPipe = deliveryPipeManager.getDeliveryPipe(deliveryPipeId);
        mav.addObject("autoGenerateContent", isAutogeneratedTheme(deliveryPipe.getTheme()));
        mav.addObject("deliveryPipe", deliveryPipe);
        mav.addObject("deliverable", newDeliverable);
        return mav;
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/scheduled/{deliverableId}"})
    public ModelAndView viewScheduledContent(@PathVariable("deliveryPipeId") long deliveryPipeId, @PathVariable("deliverableId") long deliverableId) {

        LOG.info("/deliverypipe/" + deliveryPipeId + "/scheduled/" + deliverableId);

        DeliveryPipe deliveryPipe = deliveryPipeManager.getDeliveryPipe(deliveryPipeId);
        ScheduledDeliverable deliverable = scheduledManager.getScheduledDeliverable(deliverableId);

        ModelAndView mav = new ModelAndView(deliverable.getStatus() == DeliverableStatus.APPROVED ? "contentView" : "contentEdit");
        mav.addObject("autoGenerateContent", isAutogeneratedTheme(deliveryPipe.getTheme()));
        mav.addObject("deliveryPipe", deliveryPipe);
        mav.addObject("deliverable", deliverable);
        return mav;
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/scheduled/{deliverableId}"}, params = {"save"})
    public ModelAndView saveScheduledContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId,
            final ScheduledDeliverable deliverable,
            final BindingResult bindingResult,
            final ModelMap model) {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/scheduled/" + deliverableId + " param=save");
        ModelAndView mav = new ModelAndView("contentEdit");

        if (bindingResult.hasErrors()) {
            mav = mavAddNLogErrorText(mav, bindingResult.getAllErrors());
            mav.addObject(
                    "deliverable",
                    model.getOrDefault("deliverable", new ScheduledDeliverable())
            );
            mav.addObject("error", true);
        } else {
            try {
                DeliveryPipe deliveryPipe = getDeliveryPipe(deliveryPipeId);
                if (deliverableId != 0) { // deliverableId == 0 when deliverable is in create state
                    deliverable.setFiles((List<ContentFile>) deliverableManager.getDeliverablesContentFiles(deliverableId));
                }
                ScheduledDeliverable savedContent = scheduledManager.saveScheduledDeliverable(deliveryPipeId, deliverable);
                mav.addObject("autoGenerateContent", isAutogeneratedTheme(deliveryPipe.getTheme()));
                mav.addObject("deliveryPipe", deliveryPipe);
                mav.addObject("deliverable", savedContent);
                mav.addObject("saved", true);

                if (deliverable.getId() == null) {
                    contentCreationNotification(savedContent, deliveryPipe);
                }

            } catch (Exception ex) {
                LOG.error(ex);
                throw new DataHandlingException(ex);
            }
        }

        return mav;
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/scheduled/{deliverableId}/approve"})
    @ResponseStatus(value = HttpStatus.OK)
    public void approveScheduledContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId) throws Exception {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/scheduled/" + deliverableId + "/approve");
        ScheduledDeliverable content = getScheduledDeliverable(deliverableId, DeliverableStatus.APPROVED);
        DeliveryPipe deliveryPipe = getDeliveryPipe(deliveryPipeId);

        content.setStatus(DeliverableStatus.APPROVED);
        scheduledManager.saveScheduledDeliverable(deliveryPipeId, content);

        contentApproveNotification(content, deliveryPipe);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/scheduled/{deliverableId}/disapprove"})
    @ResponseStatus(value = HttpStatus.OK)
    public void disapproveScheduledContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId) throws Exception {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/scheduled/" + deliverableId + "/disapprove");
        ScheduledDeliverable content = getScheduledDeliverable(deliverableId, DeliverableStatus.PENDING_APPROVAL);
        DeliveryPipe deliveryPipe = getDeliveryPipe(deliveryPipeId);

        content.setStatus(DeliverableStatus.DISAPPROVED);
        scheduledManager.saveScheduledDeliverable(deliveryPipeId, content);

        contentDisapproveNotification(content, deliveryPipe);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN')")
    @RequestMapping({"/deliverypipe/{deliveryPipeId}/scheduled/remove/{deliverableId}"})
    public ModelAndView viewRemovableScheduledContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId) {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/scheduled/remove/" + deliverableId);
        ScheduledDeliverable deliverable = scheduledManager.getScheduledDeliverable(deliverableId);
        ModelAndView mav = new ModelAndView("contentScheduledRemove");
        mav.addObject("deliverable", deliverable);
        return mav;
    }

    @PreAuthorize("hasAnyAuthority('ADMIN')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/scheduled/remove/{deliverableId}"}, params = {"remove"})
    public ModelAndView removeScheduledContent(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableId") long deliverableId,
            final ScheduledDeliverable deliverable,
            final BindingResult bindingResult,
            final ModelMap model) {
        LOG.info("/deliverypipe/" + deliveryPipeId + "/scheduled/remove/" + deliverableId + " param=remove");
        ModelAndView mav = new ModelAndView("contentScheduledRemove");
        if (bindingResult.hasErrors()) {
            mav = mavAddNLogErrorText(mav, bindingResult.getAllErrors());
            mav.addObject("deliverable", model.getOrDefault("deliverable", new ScheduledDeliverable()));
            mav.addObject("error", true);
        } else {
            try {
                scheduledManager.removeScheduledDeliverable(deliverable.getId());
                mav.addObject("deliverable", deliverable);
                mav.addObject("removed", true);
            } catch (Exception ex) {
                LOG.error(ex);
                throw new DataHandlingException(ex);
            }
        }

        return mav;
    }

    //</editor-fold>

//<editor-fold defaultstate="collapsed" desc="notifications">
    private void contentCreationNotification(AbstractDeliverable deliverable,
            DeliveryPipe deliveryPipe) {
        String notificationSubject = String.format(
                deliverableCreatedMessageSubject,
                deliverable.getContent().getTitle());
        String notificationMessage = String.format(
                deliverableCreatedMessageText,
                deliverable.getContent().getTitle(),
                deliveryPipe.getName());

        notificationManager.notifyAdmin(notificationSubject, notificationMessage);
    }

    private void contentApproveNotification(
            AbstractDeliverable deliverable, DeliveryPipe deliveryPipe) {
        String notificationSubject = String.format(
                deliverableApprovedMessageSubject,
                deliverable.getContent().getTitle());
        String notificationMessage = String.format(
                deliverableApprovedMessageText,
                deliverable.getContent().getTitle(),
                deliveryPipe.getName());

        notify(deliveryPipe.getProviders(), notificationSubject, notificationMessage);
    }

    private void contentDisapproveNotification(
            AbstractDeliverable deliverable, DeliveryPipe deliveryPipe) {
        String notificationSubject = String.format(
                deliverableDisapprovedMessageSubject,
                deliverable.getContent().getTitle());
        String notificationMessage = String.format(
                deliverableDisapprovedMessageText,
                deliverable.getContent().getTitle(),
                deliveryPipe.getName());

        notify(deliveryPipe.getProviders(), notificationSubject, notificationMessage);
    }

    private void notify(Collection<User> users, String notificationSubject,
            String notificationMessage) {
        Collection<Provider> providers = new ArrayList<>();
        for (User user : users) {
            Provider provider = providerManager.findByUserId(user.getId());
            if (provider != null) {
                providers.add(provider);
            }
        }

        notificationManager.notifyProviders(
                providers, notificationSubject, notificationMessage);
    }
    //</editor-fold>


//<editor-fold defaultstate="collapsed" desc="MyResponse">
    protected class MyResponse {

        private String message;
        private String error;
        private String data;
        private List<ContentFile> files;

//<editor-fold defaultstate="collapsed" desc="getter/setter">
        public MyResponse() {
            this.files = new ArrayList<>();
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }

        public List<ContentFile> getFiles() {
            return files;
        }

        public void setFiles(List<ContentFile> files) {
            this.files = files;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
//</editor-fold>
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="XLSX File upload">
        @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/contentfileupload"})
    public @ResponseBody
    ResponseEntity<MyResponse> uploadContentXLSXFile(
            MultipartHttpServletRequest request
    ) {
        LOG.info("uploadContentXLSXFile... .xlsx file upload - " + request.getContextPath() + "/contentfileupload");
        MyResponse response = new MyResponse();

        try {
            Iterator<String> itr = request.getFileNames();

            while (itr.hasNext()) {
                String uploadedFile = itr.next();
                MultipartFile file = request.getFile(uploadedFile);
                LOG.info("Processing downloaded .xlsx file: " + file.getContentType() + " (" + file.getOriginalFilename() + ")");

                ContentFile contentFile = new ContentFile();
                contentFile.setMimeType(file.getContentType());
                contentFile.setOriginalFilename(file.getOriginalFilename());
                
                LOG.info("Creating thumbnail image");

                String context = request.getServletContext().getRealPath("/");               
                File xlsxicon = new File(context + "/WEB-INF/classes/static/img/excel-xlsx-icon.png");

                byte[] fileContent = Files.readAllBytes(xlsxicon.toPath());
                contentFile.setThumbImage(ContentFile.generateThumbImage(fileContent));
                
                // SMB and DB save
                contentFile = fileManager.saveFile(contentFile, file.getBytes());
                //System.out.println(file.getName());
                contentFile.createAndSetImageHtmlBlock(servletContext);
                response.getFiles().add(contentFile);
                
                //System.out.println("Ladattu kantaan: id " + contentFile.getId() + ",  " + contentFile.getUuid());
            }
        } catch (Exception e) {
            LOG.error("File upload failed", e);
            response.setMessage("File upload failed");
            response.setError(response.getMessage());
            response.getFiles().clear();
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        if (response.getFiles().stream().anyMatch(x -> {
            if (x.isAccepted()) {
                return false;
            }
            LOG.error("Request completed with errors. " + x.getErrorMessage());
            response.setMessage("File upload failed");
            response.setError(response.getMessage());
            return true;
        })) {
            response.getFiles().clear();
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        LOG.info("File upload completed");
        response.setMessage("Request completed");
        //System.out.println("response.getFiles() = " +response.getFiles().size());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
   //</editor-fold> 
    
    //<editor-fold defaultstate="collapsed" desc="fileupload">
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/fileupload"})
    public @ResponseBody
    ResponseEntity<MyResponse> uploadDeliverableFile(
            MultipartHttpServletRequest request
    ) {
        LOG.info("uploadDeliverableFile... file upload - " + request.getContextPath() + "/fileupload");
        MyResponse response = new MyResponse();

        try {
            Iterator<String> itr = request.getFileNames();

            while (itr.hasNext()) {
                String uploadedFile = itr.next();
                MultipartFile file = request.getFile(uploadedFile);
                LOG.info("Processing downloaded file: " + file.getContentType() + "(" + file.getOriginalFilename() + ")");

                ContentFile contentFile = new ContentFile();
                contentFile.setMimeType(file.getContentType());

                contentFile.setOriginalFilename(file.getOriginalFilename());
                LOG.info("Creating thumbnail image");
                contentFile.setThumbImage(ContentFile.generateThumbImage(file.getBytes()));

                // SMB and DB save
                
                contentFile = fileManager.saveFile(contentFile, file.getBytes());
                contentFile.createAndSetImageHtmlBlock(servletContext);
                response.getFiles().add(contentFile);

            }
        } catch (Exception e) {
            LOG.error("File upload failed", e);
            response.setMessage("File upload failed");
            response.setError(response.getMessage());
            response.getFiles().clear();
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        if (response.getFiles().stream().anyMatch(x -> {
            if (x.isAccepted()) {
                return false;
            }
            LOG.error("Request completed with errors. " + x.getErrorMessage());
            response.setMessage("File upload failed");
            response.setError(response.getMessage());
            return true;
        })) {
            response.getFiles().clear();
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        LOG.info("File upload completed");
        response.setMessage("Request completed");
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/{deliveryPipeId}/{deliverableType}/{deliverableId}/files"})
    public @ResponseBody
    ResponseEntity<MyResponse> saveDeliverableFile(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableType") String deliverableType,
            @PathVariable("deliverableId") long deliverableId,
            MultipartHttpServletRequest request
    ) {
        LOG.info("saveDeliverableFile... file save - " + request.getContextPath() + "/deliverypipe/" + deliveryPipeId + "/" + deliverableType + "/" + deliverableId + "/files");
        MyResponse response = new MyResponse();

        try {
            AbstractDeliverableEntity entity = deliverableManager.findOne(deliverableId);

            if (entity == null) {
                String errMsg = "Can't find deliverable from repository with id=" + deliverableId;
                LOG.error(errMsg);
                throw new Exception("Internal error - " + errMsg);
            }

            Collection<Part> parts = request.getParts();
            String fileUuid;
            for (Part part : parts) {
                String partName = part.getName();
                InputStream dataStream = part.getInputStream();
                fileUuid = "";
                if (dataStream != null) {
                    byte[] buff = new byte[(int) part.getSize()];
                    int b, i = 0;
                    while ((b = dataStream.read()) != -1) {
                        buff[i++] = (byte) b;
                    }
                    fileUuid = new String(buff, "UTF-8");
                }

                if (partName.equals("addFile")) {
                    FileEntity file = fileManager.getFileByUuid(fileUuid);
                    if (file == null) {
                        String errMsg = "Can't find file from repository with id=" + fileUuid;
                        LOG.error(errMsg);
                        throw new Exception("Internal error - " + errMsg);
                    }
                    deliverableManager.addFile(entity, file);
                }
                if (partName.equals("removeFile")) {
                    Iterator<FileEntity> itr = entity.getFiles().iterator();
                    while (itr.hasNext()) {
                        FileEntity file = itr.next();
                        if (file.getUuid().equals(fileUuid)) {
                            itr.remove();
                        }
                    }
                    FileEntity file = fileManager.getFileByUuid(fileUuid);
                    fileManager.deleteFile(file);

                }
            }
            
            entity = deliverableManager.regenerateImageContent(entity);
            deliverableManager.saveDeliverable(deliveryPipeId, entity);

            response.setData(((CustomContentEntity) entity.getContent()).getContent());
            
            



        } catch (Exception ex) {
            LOG.error(ex);
            response.setMessage("File handling failed");
            response.setError(ex.getLocalizedMessage());
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        LOG.info("File handling completed");
        response.setMessage("File(s) handled");
        response.setError("");
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

        @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/deliverypipe/handlexlsxfiles"})
    public @ResponseBody
    ResponseEntity<MyResponse> saveDeliverableXLSXFile(
            @PathVariable("deliveryPipeId") long deliveryPipeId,
            @PathVariable("deliverableType") String deliverableType,
            @PathVariable("deliverableId") long deliverableId,
            MultipartHttpServletRequest request
    ) {
        LOG.info("saveDeliverableFile... file save - " + request.getContextPath() + "/deliverypipe/" + deliveryPipeId + "/" + deliverableType + "/" + deliverableId + "/handlexlsxfiles");
        MyResponse response = new MyResponse();

        try {
            AbstractDeliverableEntity entity = deliverableManager.findOne(deliverableId);
            if (entity == null) {
                String errMsg = "Can't find deliverable from repository with id=" + deliverableId;
                LOG.error(errMsg);
                throw new Exception("Internal error - " + errMsg);
            }

            Collection<Part> parts = request.getParts();
            String fileUuid;
            for (Part part : parts) {
                String partName = part.getName();
                InputStream dataStream = part.getInputStream();
                fileUuid = "";
                if (dataStream != null) {
                    byte[] buff = new byte[(int) part.getSize()];
                    int b, i = 0;
                    while ((b = dataStream.read()) != -1) {
                        buff[i++] = (byte) b;
                    }
                    fileUuid = new String(buff, "UTF-8");
                }

                if (partName.equals("addFile")) {
                    FileEntity file = fileManager.getFileByUuid(fileUuid);
                    if (file == null) {
                        String errMsg = "Can't find file from repository with id=" + fileUuid;
                        LOG.error(errMsg);
                        throw new Exception("Internal error - " + errMsg);
                    }
                    deliverableManager.addFile(entity, file);
                }
                if (partName.equals("removeFile")) {
                    Iterator<FileEntity> itr = entity.getFiles().iterator();
                    while (itr.hasNext()) {
                        FileEntity file = itr.next();
                        if (file.getUuid().equals(fileUuid)) {
                            itr.remove();
                        }
                    }
                    FileEntity file = fileManager.getFileByUuid(fileUuid);
                    fileManager.deleteFile(file);

                }
            }

            entity = deliverableManager.regenerateImageContent(entity);
            deliverableManager.saveDeliverable(deliveryPipeId, entity);
            response.setData(((CustomContentEntity) entity.getContent()).getContent());

        } catch (Exception ex) {
            LOG.error(ex);
            response.setMessage("File handling failed");
            response.setError(ex.getLocalizedMessage());
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        LOG.info("File handling completed");
        response.setMessage("File(s) handled");
        response.setError("");
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
    
    // File removing without automatic content regeneration
    @PreAuthorize("hasAnyAuthority('ADMIN','PROVIDER')")
    @RequestMapping(value = {"/fileremovebyuuid/{fileUuid}"})
    public @ResponseBody
    ResponseEntity<String> removeFileByUuid(
            @PathVariable("fileUuid") String fileUuid,
            MultipartHttpServletRequest request
    ) {
        LOG.info("Removing file by UUID=" + fileUuid);

        FileEntity fileToRemove = fileManager.getFileByUuid(fileUuid);
        if (fileToRemove != null) {
            deliverableManager.removeFileFromDeliverables(fileToRemove);
        }

        LOG.info("Removing completed");
        return new ResponseEntity<>("Request completed", HttpStatus.OK);
    }

//</editor-fold>

        //<editor-fold defaultstate="collapsed" desc="Save all picture with new name">
     private Map<Integer, Map<Integer, String>> saveAllPicturesWithNewName(Map<Integer, Map<Integer, String>> sxcfpicnames) {

        Map<Integer, Map<Integer, String>> allpicnames = new TreeMap<Integer, Map<Integer, String>>(sxcfpicnames);
        //Map<Integer, Map<Integer, String>> allnewpicnames = allpicnames;

        List <File>removeOriginalPictures = new ArrayList();

        for (Map.Entry<Integer, Map<Integer, String>> entry : allpicnames.entrySet()) {

            //Map<Integer, String> picdata = allpicnames.get(entry.getKey());
            //System.out.println("Validin sheetin index = " + entry.getKey());
            Map<Integer, String> sheetpicnames = (Map<Integer, String>) allpicnames.get(entry.getKey());

            //for(int i = 0; i < sheetpicnames.size(); i++){
            for (Map.Entry<Integer, String> picentry : sheetpicnames.entrySet()) {
                //System.out.println(allpicnames.get(i));
                try {

                    ContentFile contentFile = new ContentFile();
                    
                    // MAGICSTRING
                    File picturefromxslx = new File("/home/ubuntu1604/mcontent_files/" + sheetpicnames.get(picentry.getKey()));
                    byte[] filebytes = Files.readAllBytes(picturefromxslx.toPath());
                    contentFile.setThumbImage(ContentFile.generateThumbImage(filebytes));

                    String mime = sheetpicnames.get(picentry.getKey()).substring(sheetpicnames.get(picentry.getKey()).indexOf(".") + 1);
                    contentFile.setMimeType("image/" + mime);
                    contentFile.setOriginalFilename(sheetpicnames.get(picentry.getKey()));
                    if(!removeOriginalPictures.contains(picturefromxslx))
                    removeOriginalPictures.add(picturefromxslx);
                    LOG.info("Creating thumbnail image");
                    contentFile.setThumbImage(ContentFile.generateThumbImage(filebytes));

                    // SMB and DB save for picture
                    contentFile = fileManager.saveFile(contentFile, filebytes);
                    //System.out.println(picentry.getValue() + ", " + contentFile.getUuid());
                    picentry.setValue(contentFile.getUuid()+"."+mime);
                    
                    //picturefromxslx.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }/*
         Map<Integer, Map<Integer, String>> allpicnames1 = new TreeMap<Integer, Map<Integer, String>>(sxcfpicnames);
         //Map<Integer, Map<Integer, String>> allnewpicnames1 = allpicnames;

         for (Map.Entry<Integer, Map<Integer, String>> entry : allpicnames1.entrySet()) {

             //Map<Integer, String> picdata = allpicnames.get(entry.getKey());
             //System.out.println("Validin sheetin index = " + entry.getKey());
             Map<Integer, String> sheetpicnames1 = (Map<Integer, String>) allpicnames1.get(entry.getKey());

             //for(int i = 0; i < sheetpicnames.size(); i++){
             for (Map.Entry<Integer, String> picentry : sheetpicnames1.entrySet()) {
                 System.out.println(picentry.getKey() + ", " + picentry.getValue());
             }
         }
*/      
         // Ok, all done, remove original files
         Iterator itr = removeOriginalPictures.iterator();

         while (itr.hasNext()) {
            ((File) itr.next()).delete();
         }
          return allpicnames;  
    }
     
//</editor-fold>
    
}
